class Canvas{
	/**@param {Number} width @param {Number} height @param {HTMLElement} parent @param {boolean} transparent*/constructor(width,height,parent,transparent=!0){this.canvas=document.createElement("canvas"),this.w=width||window.innerWidth,this.h=height||window.innerHeight,this.canvas.width=this.w,this.canvas.height=this.h,parent.appendChild&&parent.appendChild(this.canvas),this.ctx=this.canvas.getContext("2d",{alpha:transparent}),this.ctx.textAlign="center",this.parent=parent,this.textOptions={"font-style":"normal","font-variant":"normal","font-weight":"normal","font-size":"12em","line-height":"1","font-family":"system-ui"}}set width(width){this.resize(width,this.h)}get width(){return this.w}set height(height){this.resize(this.w,height)}get height(){return this.h}/**@param {Number} width @param {Number} height*/resize(width,height){this.canvas.width=this.w=width||this.canvas.clientWidth,this.canvas.height=this.h=height||this.canvas.clientHeight}resizeToParent(){this.resize(this.parent.clientWidth,this.parent.clientHeight)}resizeToWindow(){this.resize(window.innerWidth,window.innerHeight)}/**@param {String} color*/setDrawColor(color){this.ctx.strokeStyle=this.ctx.fillStyle=color}/**@param {String} color*/setStrokeColor(color){this.ctx.strokeStyle=color}/**@param {String} color*/setFillColor(color){this.ctx.fillStyle=color}/**@param {Number} width*/setStrokeWidth(width){this.ctx.lineWidth=width}beginPath(){this.ctx.beginPath()}/**@param {Number} x @param {Number} y*/moveTo(x,y){this.ctx.moveTo(x,y)}/**@param {Number} x @param {Number} y*/lineTo(x,y){this.ctx.lineTo(x,y)}/**@param {Number} x @param {Number} y @param {Number} r @param {Number} a1 @param {Number} a2 @param {Boolean} counterclockwise*/arc(x,y,r,a1,a2,counterclockwise=!1){this.ctx.arc(x,y,r,2*a1*PI,2*a2*PI,counterclockwise)}stroke(){this.ctx.stroke()}fill(){this.ctx.fill()}closePath(){this.ctx.closePath()}/**@param {String} color*/clear(color){this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),color?(this.setFillColor(color),this.ctx.fillRect(0,0,this.w,this.h)):this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}/**@param {Number} x1 @param {Number} y1 @param {Number} x2 @param {Number} y2*/line(x1,y1,x2,y2){this.ctx.beginPath(),this.ctx.moveTo(x1,y1),this.ctx.lineTo(x2,y2),this.ctx.stroke(),this.ctx.closePath()}/**@param {Number} x1 @param {Number} y1 @param {Number} x2 @param {Number} y2*/fillRect(x1,y1,x2,y2){this.ctx.fillRect(x1,y1,x2-x1,y2-y1)}/**@param {Number} x1 @param {Number} y1 @param {Number} x2 @param {Number} y2*/drawRect(x1,y1,x2,y2){this.ctx.beginPath(),this.ctx.rect(x1,y1,x2-x1,y2-y1),this.ctx.stroke(),this.ctx.closePath()}/**@param {Number} x @param {Number} y @param {Number} width*/fillSquare(x,y,width){this.ctx.fillRect(x,y,width,width)}/**@param {Number} x @param {Number} y @param {Number} width*/square(x,y,width){this.ctx.beginPath(),this.ctx.rect(x,y,width,width),this.ctx.stroke(),this.ctx.closePath()}/**@param {Number} x @param {Number} y @param {Number} r*/fillCircle(x,y,r){this.ctx.beginPath(),this.ctx.arc(x,y,r,0,2*PI),this.ctx.fill(),this.ctx.closePath()}/**@param {Number} x @param {Number} y @param {Number} r*/circle(x,y,r){this.ctx.beginPath(),this.ctx.arc(x,y,r-this.ctx.lineWidth/2,0,2*PI),this.ctx.stroke(),this.ctx.closePath()}/**=true,the arc will be inverted (not mirrored)@param {Number} x @param {Number} y @param {Number} r @param {Number} a1 @param {Number} a2 @param {Boolean} counterclockwise*/fillArc(x,y,r,a1,a2,counterclockwise){this.beginPath(),this.arc(x,y,r,a1,a2,counterclockwise),this.fill(),this.closePath()}/**=true,the arc will be inverted (not mirrored)@param {Number} x @param {Number} y @param {Number} r @param {Number} a1 @param {Number} a2 @param {Boolean} counterclockwise*/drawArc(x,y,r,a1,a2,counterclockwise){this.ctx.beginPath(),this.ctx.arc(x,y,r,2*a1*PI,2*a2*PI,counterclockwise),this.ctx.stroke(),this.ctx.closePath()}/**=true,the arc will be inverted (not mirrored)@param {Number} x @param {Number} y @param {Number} r @param {Number} a1 @param {Number} a2 @param {Boolean} counterclockwise*/fillDoubleArc(x,y,r1,r2,a1,a2){this.ctx.beginPath(),this.ctx.arc(x,y,r1,2*a1*PI,2*a2*PI),this.ctx.arc(x,y,r2,2*a2*PI,2*a1*PI,counterclockwise),this.ctx.fill(),this.ctx.closePath()}/**@param {"Arial"|"courier"|"cursive"|"fantasy"|"monospace"|"sans-serif"|"serif"|"system-ui"} family @param {Boolean} italic @param {Boolean} bold @param {Number} line_height @param {Boolean} small_caps*/setFont(family,italic,bold,line_height,small_caps){family instanceof String&&(this.textOptions["font-family"]=family),italic instanceof Boolean&&(this.textOptions["font-style"]=italic?"italic":"normal"),bold instanceof Boolean&&(this.textOptions["font-weight"]=bold?"bold":"normal"),line_height instanceof Number&&(this.textOptions["line-height"]=line_height),small_caps instanceof Boolean&&(this.textOptions["font-variant"]=small_caps?"small_caps":"normal")}/**@param {String} txt @param {Number} x @param {Number} y @param {Number} size @param {String} font*/fillText(txt,x,y,size){this.ctx.beginPath(),this.ctx.font=[this.textOptions["font-variant"],this.textOptions["font-weight"],size+"px",this.textOptions["font-family"]].join(" "),this.ctx.textAlign="center",this.ctx.fillText(txt,x,y),this.ctx.closePath()}/**@param {String} txt @param {Number} x @param {Number} y @param {Number} size @param {String} font*/strokeText(txt,x,y,size){this.ctx.beginPath(),this.ctx.font=[this.textOptions["font-family"],this.textOptions["font-variant"],this.textOptions["font-weight"],size+"px/"+this.textOptions["line-height"]].join(" "),this.ctx.strokeText(txt,x,y),this.ctx.closePath()}/**@param {[number,number]} center @param {[number,number][]} points-verticies of polygon*/polygon(center,points){this.ctx.beginPath(),this.ctx.moveTo(points[points.length-1][0]+center[0],points[points.length-1][1]+center[1]);let t=this;points.forEach((s=>{t.ctx.lineTo(s[0]+center[0],s[1]+center[1])})),this.ctx.stroke(),this.ctx.closePath()}/**@param {[number,number]} center @param {[number,number][]} points-verticies of polygon*/fillPolygon(center,points){this.ctx.beginPath(),this.ctx.moveTo(points[points.length-1][0]+center[0],points[points.length-1][1]+center[1]);let t=this;points.forEach((s=>{t.ctx.lineTo(s[0]+center[0],s[1]+center[1])})),this.ctx.fill(),this.ctx.closePath()}/**@param {number} x-x-coordinate of the squircle center @param {number} y-y-coordinate of the squircle center @param {number} width @param {number} r*/squircle(x,y,width,r=5){this.ctx.beginPath(),this.ctx.arc(x+width/2-r,y-width/2+r,r,3*PI/2,0*PI/2),this.ctx.arc(x+width/2-r,y+width/2-r,r,0*PI/2,1*PI/2),this.ctx.arc(x-width/2+r,y+width/2-r,r,1*PI/2,2*PI/2),this.ctx.arc(x-width/2+r,y-width/2+r,r,2*PI/2,3*PI/2),this.ctx.lineTo(x+width/2-r,y-width/2),this.ctx.stroke(),this.ctx.closePath()}/**@param {number} x-x-coordinate of the squircle center @param {number} y-y-coordinate of the squircle center @param {number} width @param {number} r*/fillSquircle(x,y,width,r=5){this.ctx.beginPath(),this.ctx.arc(x+width/2-r,y-width/2+r,r,3*PI/2,0*PI/2),this.ctx.arc(x+width/2-r,y+width/2-r,r,0*PI/2,1*PI/2),this.ctx.arc(x-width/2+r,y+width/2-r,r,1*PI/2,2*PI/2),this.ctx.arc(x-width/2+r,y-width/2+r,r,2*PI/2,3*PI/2),this.ctx.lineTo(x+width/2-r,y-width/2),this.ctx.fill(),this.ctx.closePath()}/**@param {[number,number][]} points*/spline(points){this.ctx.beginPath(),this.ctx.moveTo(points[0][0],points[0][1]);let curP,nexP,m=0,dx1=0,dy1=0,dx2=0,dy2=0,preP=points[0];for(let i=1;i<points.length;i++)curP=points[i],nexP=points[i+1],nexP&&(m=(preP[1]-curP[1])/(preP[0]-curP[0]),dx2=.3*-(nexP[0]-curP[0]),dy2=dx2*m*.6),this.ctx.bezierCurveTo(preP[0]-dx1,preP[1]-dy1,curP[0]+dx2,curP[1]+dy2,curP[0],curP[1]),dx1=dx2,dy1=dy2,preP=curP;this.ctx.stroke(),this.ctx.closePath()}/**@param {[number,number]} p1-first control point @param {[number,number]} p2-second control point @param {[number,number]} p3-third control point*/bezier(p1,p2,p3){this.ctx.beginPath(),this.ctx.moveTo(...p1),this.ctx.quadraticCurveTo(...p2,...p3),this.ctx.stroke(),this.ctx.closePath()}/**@param {HTMLImageElement|HTMLCanvasElement} img @param {number} x @param {number} y*/drawImage(img,x,y){img.width,img.height,this.ctx.drawImage(img,x,y)}/**@param {HTMLImageElement|HTMLCanvasElement} img @param {number} x @param {number} y @param {number} factor-amount to scale the image by*/drawScaledImage(img,x,y,factor=1){this.ctx.drawImage(img,x,y,factor*img.width,factor*img.height)}/**@param {HTMLImageElement|HTMLCanvasElement} img @param {number} x @param {number} y @param {number} destwidth*/drawImageWithWidth(img,x,y,destwidth){let destheight=destwidth/img.width*img.height;this.ctx.drawImage(img,x,y,destwidth,destheight)}/**@param {HTMLImageElement|HTMLCanvasElement} img @param {number} x @param {number} y @param {number} destheight*/drawImageWithHeight(img,x,y,destheight){let destwidth=destheight/img.height*img.width;this.ctx.drawImage(img,x,y,destwidth,destheight)}/**@param {HTMLImageElement|HTMLCanvasElement} img @param {number} x1 @param {number} y1 @param {number} x2 @param {number} y2*/drawImageOnRect(img,x1,y1,x2,y2){let destwidth=~~(x2-x1),destheight=~~(y2-y1);this.ctx.drawImage(img,x1,y1,destwidth,destheight)}/***/pushState(){this.ctx.save()}/***/restoreState(){this.ctx.restore()}/**@param {number} angle @param {boolean} clockwise-whether to rotate clockwise @param {number} x @param {number} y*/rotate(angle,clockwise=!0,x=0,y=0){this.ctx.translate(-x,-y),this.ctx.rotate(clockwise?angle:-angle),this.ctx.translate(x,y)}/**@param {number} x @param {number} y*/translate(x,y){this.ctx.translate(x,y)}/**@param {Function} f-the function to be called*/static createAnimation(f){let then=0;const f2=t=>{f(.001*t,.001*(then-t))||(then=t,requestAnimationFrame(f2))};requestAnimationFrame(f2)}
}